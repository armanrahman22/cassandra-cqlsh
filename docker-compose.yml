version: '3'
services:
######## CASSANDRA ########
  cassandra-node1:
    image: cassandra:3
    environment:
      WAIT_TIMEOUT: "60"
      JVM_OPTS: "-Dcassandra.consistent.rangemovement=false"
      CASSANDRA_CLUSTER_NAME: "DemoCluster"
      CASSANDRA_ENDPOINT_SNITCH: "GossipingPropertyFileSnitch"
      CASSANDRA_DC: "DATA"
    restart: always 
    ports:
      - "9042:9042"
  cassandra-init:
    image: cassandra:3
    volumes:
      - ./compose-resources/cassandra:/init/scripts
    command: bash /init/scripts/cassandra-init.sh
    links:
      - cassandra-node1:cassandra
    restart: on-failure # Restart until we successfully run this script (it will fail until cassandra starts)
######## SPARK ########
  fortis-master:
    build: .
    env_file: .env
    expose:
      - 4040 
      - 8080
      - 8081
    links:
      - cassandra-node1:cassandra
    stdin_open: true
    command: /bin/bash
    restart: always

  # cassandra-worker:
  #   hostname: cassandra-host
  #   image: cassandra:3
  #   command: /bin/bash -c "sleep 1 && echo ' -- Pausing to let system catch up ... -->' && /docker-entrypoint.sh cassandra -f"
  #   links:
  #     - fortis-master
  #   expose:
  #     - 7000
  #     - 7001
  #     - 7199
  #     - 9042
  #     - 9160
  #   # volumes: # uncomment if you desire mounts, also uncomment cluster.sh
  #   # - ./data/cassandra-1:/var/lib/cassandra:rw
  # cassandra-client:
  #   hostname: cassandra-client
  #   links:
  #     - cassandra-worker
  #   image: cassandra:3
  #   command: /bin/bash -c "sleep 1 && echo ' -- Pausing to let system catch up ... -->' && ./home/setupCassandra.sh && sleep infinity"
  #   #command: /bin/bash -c "sleep 1 && echo ' -- Pausing to let system catch up ... -->' && /docker-entrypoint.sh cassandra -f"
  #   volumes: # uncomment if you desire mounts, also uncomment cluster.sh
  #     - ./scripts:/home:rw